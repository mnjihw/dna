#include "common.h"


HWND g_hWnd, g_HiddenPowerDlg;
HANDLE hThread;

INT_PTR CALLBACK HiddenPowerDlgProc(HWND hDlg, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	static HBITMAP hBitmap;
	RECT rect;
	stat_t iv;
	unsigned int index;
	const char types[][8] = {"격투", "비행", "독", "땅", "바위", "벌레", "고스트", 
		"강철", "불", "물", "풀", "전기", "에스퍼", "얼음", "드래곤", "악", "페어리"};
	char buf[128];
	BOOL result;

	switch (iMessage)
	{
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case IDC_BUTTON1:
			index = 0;
			iv.h = GetDlgItemInt(hDlg, IDC_EDIT1, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT1, 0, FALSE);
			iv.a = GetDlgItemInt(hDlg, IDC_EDIT2, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT2, 0, FALSE);
			iv.b = GetDlgItemInt(hDlg, IDC_EDIT3, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT3, 0, FALSE);
			iv.c = GetDlgItemInt(hDlg, IDC_EDIT4, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT4, 0, FALSE);
			iv.d = GetDlgItemInt(hDlg, IDC_EDIT5, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT5, 0, FALSE);
			iv.s = GetDlgItemInt(hDlg, IDC_EDIT6, &result, FALSE);
			if (result == 0)
				SetDlgItemInt(hDlg, IDC_EDIT6, 0, FALSE);
			if (iv.h > 31 || iv.a > 31 || iv.b > 31 || iv.c > 31 || iv.d > 31 || iv.s > 31)
			{
				MessageBox(hDlg, "개체값을 제대로 입력해주세요", "알림", MB_ICONINFORMATION);
				return 0;
			}
			index += iv.h & 1;
			index += (iv.a & 1) << 1;
			index += (iv.b & 1) << 2;
			index += (iv.c & 1) << 3;
			index += (iv.d & 1) << 4;
			index += (iv.s & 1) << 5;
			index = index * 15 / 63;
			iv.h &= 3;
			if (iv.h == 2 || iv.h == 3)
				iv.h = 1;
			iv.a &= 3;
			if (iv.a == 2 || iv.a == 3)
				iv.a = 2;
			iv.b &= 3;
			if (iv.b == 2 || iv.b == 3)
				iv.b = 4;
			iv.c &= 3;
			if (iv.c == 2 || iv.c == 3)
				iv.c = 8;
			iv.d &= 3;
			if (iv.d == 2 || iv.d == 3)
				iv.d = 16;
			iv.s &= 3;
			if (iv.s == 2 || iv.s == 3)
				iv.s = 32;
			SendDlgItemMessage(hDlg, IDC_LIST1, LB_RESETCONTENT, 0, 0);
			wsprintf(buf, "타입: %s", types[index]);
			SendDlgItemMessage(hDlg, IDC_LIST1, LB_INSERTSTRING, 0, (LPARAM)buf);
			wsprintf(buf, "위력: %u", (iv.h + iv.a + iv.b + iv.c + iv.d + iv.s) * 40 / 63 + 30);
			SendDlgItemMessage(hDlg, IDC_LIST1, LB_INSERTSTRING, 1, (LPARAM)buf);
			SendDlgItemMessage(hDlg, IDC_LIST1, LB_INSERTSTRING, 2, (LPARAM)"(6세대 이후는 위력 60 고정)");
			break;
		}
		break;
	case WM_INITDIALOG:
		SendDlgItemMessage(hDlg, IDC_EDIT1, EM_LIMITTEXT, (WPARAM)2, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT2, EM_LIMITTEXT, (WPARAM)2, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT3, EM_LIMITTEXT, (WPARAM)2, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT4, EM_LIMITTEXT, (WPARAM)2, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT5, EM_LIMITTEXT, (WPARAM)2, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT6, EM_LIMITTEXT, (WPARAM)2, 0);
		SendMessage(hDlg, WM_SETICON, ICON_SMALL, (LPARAM)LoadIcon(GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON1)));
		hBitmap = LoadBitmap(GetModuleHandle(NULL), MAKEINTRESOURCE(IDB_BITMAP2));
		SendDlgItemMessage(hDlg, IDC_PICTURE2, STM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBitmap);
		GetClientRect(GetDlgItem(hDlg, IDC_PICTURE2), &rect);
		SetWindowPos(GetDlgItem(hDlg, IDC_PICTURE2), 0, 0, 0, rect.right - rect.left, rect.bottom - rect.top, SWP_SHOWWINDOW);
		break;
	case WM_CLOSE:
		g_HiddenPowerDlg = 0;
		DeleteObject((HBITMAP)hBitmap);
		EndDialog(hDlg, 0);
		break;
	case WM_CTLCOLORSTATIC:
		SetBkMode((HDC)wParam, TRANSPARENT);
		return (LRESULT)GetStockObject(NULL_BRUSH);
	default:
		return FALSE;
	}
	return TRUE;
}

VOID MessageLoop()
{
	MSG Message;

	while (GetMessage(&Message, 0, 0, 0) > 0)
	{
		if (!IsDialogMessage(g_hWnd, &Message) && !IsDialogMessage(g_HiddenPowerDlg, &Message))
		{
			TranslateMessage(&Message);
			DispatchMessage(&Message);
		}
	}
}




const char* findvalue(const char *data, unsigned int size, unsigned char value)
{
	for (unsigned int i = 0; i < size; ++i)
		if (data[i] == value)
			return &data[i];
	return NULL;
	
}

LRESULT CALLBACK ComboSubclassProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam, UINT_PTR uIdSubclass, DWORD_PTR dwRefData)
{
	char buf[128];
	dbg("0x%X %X %X", iMessage, wParam, lParam);
	if (iMessage == WM_KEYDOWN)
	{
		dbg("D");
		GetWindowText(GetDlgItem(hWnd, IDC_COMBO2), buf, 128);
		dbg("%s", buf);
		return 0;
	}
	
	return DefSubclassProc(hWnd, iMessage, wParam, lParam);
}


INT_PTR CALLBACK DlgProc(HWND hDlg, UINT iMessage, WPARAM wParam, LPARAM lParam)
{
	static HBITMAP hBitmap;
	RECT rect;
	char name[128], *s, *p, index[8], buf[128], split_input[256], split[256];
	HANDLE hRes, hResInfo;
	static void *data; 
	stat_t stat;
	DWORD size;
	int idx;
	unsigned int i;
	node_t *node, element;
	static list_t *list;
	static char **name_list_sorted;
	int num;
	static char last_str[256];
	static int isempty = 1;


	switch (iMessage)
	{
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case IDC_EDIT20:
			if (HIWORD(wParam) == EN_UPDATE)
			{
				GetDlgItemText(hDlg, IDC_EDIT20, buf, 128);
				dbg("%s", buf);
				SendDlgItemMessage(hDlg, IDC_LIST2, LB_SELECTSTRING, -1, buf);
			}
			break;
			/*
		case IDC_COMBO2:
			if (HIWORD(wParam) == CBN_EDITCHANGE)
			{

				GetDlgItemText(hDlg, IDC_COMBO2, buf, sizeof(buf));
				//dbg("2: %s", buf);
			}
			if (HIWORD(wParam) == CBN_EDITUPDATE)
			{
				GetDlgItemText(hDlg, IDC_COMBO2, buf, sizeof(buf));
				//dbg("1: %s", buf); 
				return;
				if (GetDlgItemText(hDlg, IDC_COMBO2, buf, sizeof(buf)) == 0)
				{
					isempty = 1;
					break;
				}
				if (isempty && !strcmp(last_str, buf))
				{
					isempty = 0;
					break;
				}
				strcpy(last_str, buf);
				isempty = 0;
				dbg("%s", buf);
				return;
				split_hangul(buf, split_input, sizeof(split_input));
				dbg("%s", buf);
				for (i = 0; i < 10; ++i)
				{
					//dbg("%s %s", buf, name_list_sorted[i]);
					split_hangul(name_list_sorted[i], split, split);
					num = my_strcmp(split_input, split);
					//dbg("%s %s %s", num == 1 ? name_list_sorted[i] : buf, num == 0 ? "==" : ">>", num == 1 ? buf : name_list_sorted[i]);
				}
			}
			break;
			*/
		case IDOK:
			if (GetFocus() == GetDlgItem(hDlg, IDC_COMBO2))
				SendMessage(hDlg, WM_COMMAND, IDC_BUTTON3, 0);
			break;
		case IDC_BUTTON1: //개체값 계산
			SendDlgItemMessage(hDlg, IDC_COMBO2, CB_SHOWDROPDOWN, TRUE, 0);
			break;
		case IDC_BUTTON2: //결과 복사

			break;
		case IDC_BUTTON3: //검색
			if (!GetDlgItemText(hDlg, IDC_COMBO2, name, sizeof(name)))
			{
				MessageBox(0, "포켓몬 이름을 입력해주세요.", "알림", MB_OK);
				break;
			}
			CharUpper(name);
			if ((s = strstr(data, name)))
			{
				s -= 4;
				sscanf(s, "%s %*s %u %u %u %u %u %u", index, &stat.h, &stat.a, &stat.b, &stat.c, &stat.d, &stat.s);
				wsprintf(buf, "%s %s %u %u %u %u %u %u", index, name, stat.h, stat.a, stat.b, stat.c, stat.d, stat.s);

				MessageBox(0, buf, 0, 0);
			}
			else
			{
				MessageBox(0, "입력하신 포켓몬을 찾지 못했습니다.", "알림", MB_OK);
				break;
			}

			break;
		case IDC_BUTTON4: //잠재파워
			if (!g_HiddenPowerDlg)
				g_HiddenPowerDlg = CreateDialog(NULL, MAKEINTRESOURCE(IDD_DIALOG2), 0, HiddenPowerDlgProc);
			else
				SetForegroundWindow(g_HiddenPowerDlg);
			break;
		}
		break;
	case WM_INITDIALOG:
		g_hWnd = hDlg;
		SendDlgItemMessage(hDlg, IDC_EDIT1, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT2, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT3, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT4, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT5, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT6, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT7, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT8, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT9, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT10, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT11, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT12, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT13, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT14, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT15, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT16, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT17, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT18, EM_LIMITTEXT, (WPARAM)3, 0);
		SendDlgItemMessage(hDlg, IDC_EDIT19, EM_LIMITTEXT, (WPARAM)3, 0);

		SendDlgItemMessage(hDlg, IDC_COMBO2, CB_LIMITTEXT, (WPARAM)20, 0);

		SendMessage(hDlg, WM_SETICON, ICON_SMALL, (LPARAM)LoadIcon(GetModuleHandle(NULL), MAKEINTRESOURCE(IDI_ICON1)));
		hBitmap = LoadBitmap(GetModuleHandle(NULL), MAKEINTRESOURCE(IDB_BITMAP1));
		SendDlgItemMessage(hDlg, IDC_PICTURE1, STM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBitmap);
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"외로움(공격 ↑, 방어 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"고집(공격 ↑, 특공 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"개구쟁이(공격 ↑, 특방 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"용감(공격 ↑, 스핏 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"대담(방어 ↑, 공격 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"장난꾸러기(방어 ↑, 특공 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"촐랑(방어 ↑, 특방 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"무사태평(방어 ↑, 스핏 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"조심(특공 ↑, 공격 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"의젓(특공 ↑, 방어 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"덜렁(특공 ↑, 특방 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"냉정(특공 ↑, 스핏 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"차분(특방 ↑, 공격 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"얌전(특방 ↑, 방어 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"신중(특방 ↑, 특공 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"건방(특방 ↑, 스핏 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"겁쟁이(스핏 ↑, 공격 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"성급(스핏 ↑, 방어 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"명랑(스핏 ↑, 특공 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"천진난만(스핏 ↑, 특방 ↓)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"노력(무보정)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"온순(무보정)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"성실(무보정)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"수줍(무보정)");
		SendDlgItemMessage(hDlg, IDC_COMBO1, CB_ADDSTRING, 0, (LPARAM)"변덕(무보정)");

		//SetWindowSubclass(GetDlgItem(hDlg, IDC_COMBO2), ComboSubclassProc, 0, 0);

		hResInfo = FindResource(GetModuleHandle(NULL), MAKEINTRESOURCE(IDR_TXT1), "TXT");
		hRes = LoadResource(GetModuleHandle(NULL), (HRSRC)hResInfo);
		size = SizeofResource(GetModuleHandle(NULL), (HRSRC)hResInfo);
		data = (char*)malloc(size + 1);
		strcpy(data, LockResource(hRes));
		s = data;
		

		list = create_list();
		
		do
		{
			sscanf(s, "%*s %s %*s %*s %*s %*s %*s %*s", name);

			p = s;
			while (++p, *p != '\n' && *p != '\0')
				if (*p == '_')
					*p = ' ';

			p = name;
			while (++p, *p != '\n' && *p != '\0')
				if (*p == '_')
					*p = ' ';

			p = strstr(s, name);
			p[strlen(name)] = '\0';

			element.data = p;
			node = list->head;
			idx = -1;

			if(list->count == 0)
				add_element(list, element);
			else
			{
				while (++idx, node)
				{
					if (strcmp(node->data, name) < 0)
					{
						if (node->next)
						{
							node = node->next;
							continue;
						}
						else
						{
							add_element(list, element);
							break;
						}
					}
					else
					{
						insert_element(list, idx, element);
						break;
					}
					node = node->next;
				}
			}

			s = &p[strlen(name)] + 1;
			s = strchr(s, '\n') + 1;

			SendDlgItemMessage(hDlg, IDC_COMBO2, CB_ADDSTRING, 0, (LPARAM)name);
			SendDlgItemMessage(hDlg, IDC_LIST2, LB_ADDSTRING, 0, (LPARAM)name);
		} while ((unsigned int)(s - (char*)data) < size);

		node = list->head;
		name_list_sorted = (char**)malloc(sizeof(char*) * list->count);
		for (i = 0; i < list->count; ++i)
		{
			name_list_sorted[i] = node->data;
			//dbg("%s", name_list_sorted[i]); 
			node = node->next;
		}
		GetClientRect(GetDlgItem(hDlg, IDC_PICTURE1), &rect);
		SetWindowPos(GetDlgItem(hDlg, IDC_PICTURE1), 0, 0, 0, rect.right - rect.left, rect.bottom - rect.top, SWP_SHOWWINDOW);
		SetFocus(GetDlgItem(hDlg, IDC_COMBO2));
		SendDlgItemMessage(hDlg, IDC_COMBO2, CB_SHOWDROPDOWN, TRUE, 0);
		break;
	case WM_CLOSE:
		RemoveWindowSubclass(GetDlgItem(hDlg, IDC_COMBO2), ComboSubclassProc, 0);
		free(name_list_sorted);
		free(data);
		DeleteObject((HBITMAP)hBitmap);
		PostQuitMessage(0);
		break;

	case WM_CTLCOLORSTATIC:
		SetBkMode((HDC)wParam, TRANSPARENT);
		return (LRESULT)GetStockObject(NULL_BRUSH);
	default:
		return FALSE;

	}
	return TRUE;
}



int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdParam, int nCmdShow)
{
	HWND hwnd;


	if (IsUserAnAdmin() == FALSE)
	{
		MessageBox(0, "관리자 권한이 아닙니다.\n관리자 권한으로 다시 실행해주세요.", "알림", MB_ICONERROR);
		return 0;
	}

	if ((hwnd = FindWindow("#32770", "리듬 개체값 계산기")))
	{
		SetForegroundWindow(hwnd);
		return 0;
	}

	CreateDialog(NULL, MAKEINTRESOURCE(IDD_DIALOG1), NULL, DlgProc);
	MessageLoop();

	return 0;
}